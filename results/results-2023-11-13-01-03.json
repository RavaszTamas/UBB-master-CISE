{
    "prompts": {
        "36041ee4-b109-4db4-b075-306ed5c046cf": "class  User(BaseModel):\n    \tid:  int\n    \tusername:  str\n\n    class  Product(BaseModel):\n    \tid:  int\n    \tname:  str\n \tprice:  float\n\n    class  Order(BaseModel):\n    \tid:  int\n    \tuser_id:  int\n\n    class  OrderItem(BaseModel):\n    \tid:  int\n    \torder_id:  int\n    \tproduct_id:  int",
        "170463ad-8d1f-4b68-a373-7ca8f98bfd42": "class User(BaseModel):\n    \tid:  int\n    \tname:  str\n    \temail:  str\n\n    class Product(BaseModel):\n    \tid:  int\n    \tname:  str\n    \tdescription:  str\n\n    class Order(BaseModel):\n    \tid:  int\n    \tuser_id:  int\n\n    class OrderItem(BaseModel):\n    \tid:  int\n    \torder_id:  int",
        "fd8ef1c9-7f2c-4d33-abab-b7ba122cb5cf": "class Infrastructure(BaseModel):\n        id:  int\n        name:  str\n\n    class Server(BaseModel):\n    \tid:  int\n    \tname:  str\n\n    class  Database(BaseModel):\n    \tid:  int\n    \tname:  str\n    \tserver_id:  int",
        "ce8e33ac-5753-447a-8b27-a8ec45c4643c": "class NetworkDevice(BaseModel):\n    \thostname:  str\n    \tip_address:  IPv4Address\n\n    class  NetworkInterface(BaseModel):\n    \tname:  str\n    \tdescription:  str\n\n    class  NetworkConnection(BaseModel):\n    \tsource_device:  NetworkDevice\n    \tsource_interface:  NetworkInterface\n    \tdestination_device:  NetworkDevice",
        "f328069f-07eb-493d-9d7e-42d8ab962912": "class NetworkDevice(BaseModel):\n    \tname: str\n    \tip: str\n    \tmac: str\n\n    class NetworkInterface(BaseModel):\n    \tname: str\n    \tdevice: NetworkDevice\n\n    class NetworkConnection(BaseModel):\n    \tinterface1: NetworkInterface\n    \tinterface2: NetworkInterface\n    \tspeed: int\n\n    class NetworkVLAN(BaseModel):\n    \tname: str\n    \tid: int"
    },
    "results": {
        "36041ee4-b109-4db4-b075-306ed5c046cf": "@index_router.delete( \"/users/{user_id}\" )\n    \tasync  def  delete_user(user_id:  int):\n      \t\tuser = await  User.get(user_id)\n    \t\tif  user:\n    \t\t\tawait  user.delete()\n    \t\t\treturn  { \"message\":  \"User deleted successfully\" }\n    \t\telse:\n    \t\t\traise  HTTPException(status_code=404, detail= \"User not found\")\n    \n    @index_router.post( \"/products\" )\n    \tasync  def  create_product(product:  Product):\n    \t\tnew_product = await  Product.create(**product.dict())\n    \t\treturn  new_product\n    \n    @index_router.put( \"/orders/{order_id}\" )\n    \tasync  def  update_order(order_id:  int, order:  Order):\n    \t\texisting_order =    await  Order.get(order_id)\n    \t\tif  existing_order:\n    \t\t\tawait  existing_order.update(**order.dict()).apply()\n    \t\t\treturn  { \"message\":  \"Order updated successfully\" }\n    \t\telse:\n        \t\t\traise  HTTPException(status_code=404, detail= \"Order not found\")\n    \n    @index_router.get( \"/orders/{order_id}/items\" )\n    \tasync  def  get_order_items(order_id:  int):\n    \t\torder = await    Order.get(order_id)\n    \t\tif  order:\n    \t\t\torder_items = await  OrderItem.filter(order_id=order_id).all()\n    \t\t\treturn  order_items\n    \t\telse:\n    \t\t\traise  HTTPException(status_code=404,detail= \"Order not found\")\n    \n    @index_router.patch( \"/users/{user_id}\" )\n    \tasync  def  update_user(user_id:  int, username:  str):\n    \t\texisting_user = await  User.get(user_id)\n    \t\tif    existing_user:\n    \t\t\tawait  existing_user.update(username=username).apply()\n    \t\t\treturn  { \"message\":  \"User updated successfully\" }\n    \t\telse:\n    \t\t\traise  HTTPException(status_code=404, detail= \"User not found\")",
        "170463ad-8d1f-4b68-a373-7ca8f98bfd42": "@index_router.get( \"/users/{user_id}\", response_model=User)\n    def get_user(user_id: int):\n    \tuser = redis.hgetall(\"user:\" + str(user_id))\n    \tif user:\n    \t\treturn user\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"User not found\")\n    \n    @index_router.post( \"/users\", response_model=User)\n     def create_user(user: User):\n    \tuser_id = redis.incr(\"user_id\")\n    \tredis.hmset(\"user:\" + str(user_id), user.dict())\n    \treturn user\n    \n    @index_router.post( \"/products\", response_model=Product)\n     def create_product(product: Product):\n    \tproduct_id = redis.incr(\"product_id\")\n    \tredis.hmset(\"product:\" + str(product_id), product.dict())\n    \treturn product\n    \n    @index_router.get( \"/products/{product_id}\", response_model=Product)\n    def get_product(product_id: int):\n    \tproduct = redis.hgetall(\"product:\" + str(product_id))\n    \tif product:\n    \t\treturn product\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Product not found\")\n    \n    @index_router.post( \"/orders\", response_model=Order)\n     def create_order(order: Order):\n    \torder_id = redis.incr(\"order_id\")\n    \tredis.hmset(\"order:\" + str(order_id), order.dict())\n    \treturn order\n    \n    @index_router.get( \"/orders/{order_id}\", response_model=Order)\n    def get_order(order_id: int):\n    \torder = redis.hgetall(\"order:\" + str(order_id))\n    \tif order:\n    \t\treturn order\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Order not found\")\n    \n    @index_router.post( \"/order_items\", response_model=OrderItem)\n     def create_order_item(order_item: OrderItem):\n    \torder_item_id = redis.incr(\"order_item_id\")\n    \tredis.hmset(\"order_item:\" + str(order_item_id), order_item.dict())\n    \treturn order_item\n    \n    @index_router.get( \"/order_items/{order_item_id}\", response_model=OrderItem)\n    def get_order_item(order_item_id: int):\n    \torder_item = redis.hgetall(\"order_item:\" + str(order_item_id))\n    \tif order_item:\n    \t\treturn order_item\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Order item not found\")",
        "fd8ef1c9-7f2c-4d33-abab-b7ba122cb5cf": "@index_router.delete(Infrastructure, status_code=204)\n    async def delete_infrastructure(infrastructure_id: int):\n    \tinfrastructure = await Infrastructure.get(infrastructure_id)\n    \tif not infrastructure:\n    \t\traise HTTPException(status_code=404, detail=\"Infrastructure not found\")\n    \tawait infrastructure.delete()\n    \treturn\n    \n\n    \n    @index_router.delete(Infrastructure, status_code=204)\n    \tasync def delete_infrastructure(infrastructure_id: int):\n    \t\tinfrastructure = await Infrastructure.get(infrastructure_id)\n    \t\tif not infrastructure:\n    \t\t\traise HTTPException(status_code=404, detail=\"Infrastructure not found\")\n    \t\tawait infrastructure.delete()\n    \t\treturn\n    \n    @index_router.get(Infrastructure, response_model=Infrastructure)\n    async def get_infrastructure(infrastructure_id: int):\n    \tinfrastructure = await Infrastructure.get(infrastructure_id)\n    \tif not infrastructure:\n    \t\traise HTTPException(status_code=404, detail=\"Infrastructure not found\")\n    \treturn infrastructure\n    \n    @index_router.get(Infrastructure, response_model=List[Infrastructure])\n    async def get_all_infrastructures():\n    \tinfrastructures = await Infrastructure.all()\n    \treturn infrastructures\n    \n    @index_router.put(Infrastructure, response_model=Infrastructure)\n    async def update_infrastructure(infrastructure_id: int, infrastructure: Infrastructure):\n    \texisting_infrastructure = await Infrastructure.get(infrastructure_id)\n    \tif not existing_infrastructure:\n    \t\traise HTTPException(status_code=404, detail=\"Infrastructure not found\")\n    \tawait existing_infrastructure.update(**infrastructure.dict(exclude_unset=True)).apply()\n    \treturn await Infrastructure.get(infrastructure_id)\n    \n    @index_router.post(Infrastructure, response_model=Infrastructure, status_code=201)\n    async def create_infrastructure(infrastructure: Infrastructure):\n    \tnew_infrastructure = await Infrastructure.create(**infrastructure.dict())\n    \treturn new_infrastructure\n    \n\n    \n    @index_router.post(Infrastructure, response_model=Infrastructure, status_code=201)\n    \tasync def create_infrastructure(infrastructure: Infrastructure):\n    \t\tnew_infrastructure = await Infrastructure.create(**infrastructure.dict())\n    \t\treturn new_infrastructure\n    \n    @index_router.delete(Server, status_code=204)\n    async def delete_server(server_id: int):\n    \tserver = await Server.get(server_id)\n    \tif not server:\n    \t\traise HTTPException(status_code=404, detail=\"Server not found\")\n    \tawait server.delete()\n    \treturn\n    \n    @index_router.delete(Server, status_code=204)\n    \tasync def delete_server(server_id: int):\n    \t\tserver = await Server.get(server_id)\n    \t\tif not server:\n    \t\t\traise HTTPException(status_code=404, detail=\"Server not found\")\n    \t\tawait server.delete()\n    \t\treturn\n    \n    @index_router.get(Server, response_model=Server)\n    async def get_server(server_id: int):\n    \tserver = await Server.get(server_id)\n    \tif not server:\n    \t\traise HTTPException(status_code=404, detail=\"Server not found\")\n    \treturn server\n    \n    @index_router.get(Server, response_model=List[Server])\n    async def get_all_servers():\n    \tservers = await Server.all()\n    \treturn servers\n    \n    @index_router.put(Server, response_model=Server)\n    async def update_server(server_id: int, server: Server):\n    \texisting_server = await Server.get(server_id)\n    \tif not existing_server:\n    \t\traise HTTPException(status_code=404, detail=\"Server not found\")\n    \tawait existing_server.update(**server.dict(exclude_unset=True)).apply()\n    \treturn await Server.get(server_id)\n    \n    @index_router.post(Server, response_model=Server, status_code=201)\n    async def create_server(server: Server):\n    \tnew_server = await Server.create(**server.dict())\n    \treturn new_server",
        "ce8e33ac-5753-447a-8b27-a8ec45c4643c": "@index_router.delete( \"/network_devices/{hostname}\")\n    async  def  delete_network_device(hostname:  str):\n    \tredis_client.delete(hostname)\n    \treturn  {\"message\":  \"Network device deleted successfully.\"}\n    \n\n    \n    @index_router.put( \"/network_devices/{hostname}\")\n    \tasync  def  update_network_device(hostname:  str, network_device:  NetworkDevice):\n    \t\tredis_client.set(hostname, network_device.json())\n    \t\treturn  {\"message\":  \"Network device updated successfully.\"}\n    \t\t\n    @index_router.get( \"/network_devices/{hostname}\")\n    async  def  get_network_device(hostname:  str):\n    \tnetwork_device = redis_client.get(hostname)\n    \tif  network_device:\n    \t\treturn  json.loads(network_device)\n    \telse:\n    \t\treturn  {\"message\":  \"Network device not found.\"}\n    \t\t\n    @index_router.get( \"/network_devices\")\n    async  def  get_all_network_devices():\n    \tnetwork_devices = []\n    \tfor  key  in  redis_client.keys():\n    \t\tnetwork_devices.append(json.loads(redis_client.get(key)))\n    \treturn  network_devices\n    \n\n    \n    @index_router.put( \"/network_interfaces/{name}\")\n    \tasync  def  update_network_interface(name:  str, network_interface:  NetworkInterface):\n    \t\tredis_client.set(name, network_interface.json())\n    \t\treturn  {\"message\":  \"Network interface updated successfully.\"}\n    \t\t\n    @index_router.get( \"/network_interfaces/{name}\")\n    async  def  get_network_interface(name:  str):\n    \tnetwork_interface = redis_client.get(name)\n    \tif  network_interface:\n    \t\treturn  json.loads(network_interface)\n    \telse:\n    \t\treturn  {\"message\":  \"Network interface not found.\"}\n    \t\t\n    @index_router.get( \"/network_interfaces\")\n    async  def  get_all_network_interfaces():\n    \tnetwork_interfaces = []\n    \tfor  key  in  redis_client.keys():\n    \t\tnetwork_interfaces.append(json.loads(redis_client.get(key)))\n    \treturn  network_interfaces",
        "f328069f-07eb-493d-9d7e-42d8ab962912": "@index_router.post(\u201c/devices\u201d)\n    def create_device(device: NetworkDevice):\n    \tredis.set(device.name, device.json())\n    \treturn device\n    \n\n    \n    @index_router.get(\u201c/devices/{name}\u201d)\n     def get_device(name: str):\n    \tdevice = redis.get(name)\n    \tif device:\n    \t\treturn json.loads(device)\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Device not found\")\n    \n    @index_router.get(\u201c/devices\u201d)\n    def get_all_devices():\n    \tdevice_list = []\n    \tfor key in redis.keys():\n    \t\tdevice = redis.get(key)\n    \t\tdevice_list.append(json.loads(device))\n    \treturn device_list\n    \n    @index_router.put(\u201c/devices/{name}\u201d)\n    def update_device(name: str, device: NetworkDevice):\n    \tif redis.exists(name):\n    \t\tredis.set(name, device.json())\n    \t\treturn device\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Device not found\")\n    \n    @index_router.delete(\u201c/devices/{name}\u201d)\n    def delete_device(name: str):\n    \tif redis.exists(name):\n    \t\tredis.delete(name)\n    \t\treturn {\"message\": \"Device deleted\"}\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Device not found\")\n    \n    @index_router.post(\u201c/interfaces\u201d)\n    def create_interface(interface: NetworkInterface):\n    \tredis.set(interface.name, interface.json())\n    \treturn interface\n    \n    @index_router.get(\u201c/interfaces/{name}\u201d)\n    def get_interface(name: str):\n    \tinterface = redis.get(name)\n    \tif interface:\n    \t\treturn json.loads(interface)\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Interface not found\")\n    \n    @index_router.get(\u201c/interfaces\u201d)\n    def get_all_interfaces():\n    \tinterface_list = []\n    \tfor key in redis.keys():\n    \t\tinterface = redis.get(key)\n    \t\tinterface_list.append(json.loads(interface))\n    \treturn interface_list\n    \n    @index_router.put(\u201c/interfaces/{name}\u201d)\n    def update_interface(name: str, interface: NetworkInterface):\n    \tif redis.exists(name):\n    \t\tredis.set(name, interface.json())\n    \t\treturn interface\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Interface not found\")\n    \n    @index_router.delete(\u201c/interfaces/{name}\u201d)\n    def delete_interface(name: str):\n    \tif redis.exists(name):\n    \t\tredis.delete(name)\n    \t\treturn {\"message\": \"Interface deleted\"}\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Interface not found\")\n    \n    @index_router.post(\u201c/connections\u201d)\n    def create_connection(connection: NetworkConnection):\n    \tredis.set(connection.interface1.name + connection.interface2.name, connection.json())\n    \treturn connection\n    \n    @index_router.get(\u201c/connections/{interface1}/{interface2}\u201d)\n    def get_connection(interface1: str, interface2: str):\n    \tconnection = redis.get(interface1 + interface2)\n    \tif connection:\n    \t\treturn json.loads(connection)\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Connection not found\")\n    \n    @index_router.get(\u201c/connections\u201d)\n    def get_all_connections():\n    \tconnection_list = []\n    \tfor key in redis.keys():\n    \t\tconnection = redis.get(key)\n    \t\tconnection_list.append(json.loads(connection))\n    \treturn connection_list\n    \n    @index_router.put(\u201c/connections/{interface1}/{interface2}\u201d)\n    def update_connection(interface1: str, interface2: str, connection: NetworkConnection):\n    \tif redis.exists(interface1 + interface2):\n    \t\tredis.set(interface1 + interface2, connection.json())\n    \t\treturn connection\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Connection not found\")\n    \n    @index_router.delete(\u201c/connections/{interface1}/{interface2}\u201d)\n    def delete_connection(interface1: str, interface2: str):\n    \tif redis.exists(interface1 + interface2):\n    \t\tredis.delete(interface1 + interface2)\n    \t\treturn {\"message\": \"Connection deleted\"}\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"Connection not found\")\n    \n    @index_router.post(\u201c/vlans\u201d)\n    def create_vlan(vlan: NetworkVLAN):\n    \tredis.set(vlan.name, vlan.json())\n    \treturn vlan\n    \n    @index_router.get(\u201c/vlans/{name}\u201d)\n    def get_vlan(name: str):\n    \tvlan = redis.get(name)\n    \tif vlan:\n    \t\treturn json.loads(vlan)\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"VLAN not found\")\n    \n    @index_router.get(\u201c/vlans\u201d)\n    def get_all_vlans():\n    \tvlan_list = []\n    \tfor key in redis.keys():\n    \t\tvlan = redis.get(key)\n    \t\tvlan_list.append(json.loads(vlan))\n    \treturn vlan_list\n    \n    @index_router.put(\u201c/vlans/{name}\u201d)\n    def update_vlan(name: str, vlan: NetworkVLAN):\n    \tif redis.exists(name):\n    \t\tredis.set(name, vlan.json())\n    \t\treturn vlan\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"VLAN not found\")\n    \n    @index_router.delete(\u201c/vlans/{name}\u201d)\n    def delete_vlan(name: str):\n    \tif redis.exists(name):\n    \t\tredis.delete(name)\n    \t\treturn {\"message\": \"VLAN deleted\"}\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"VLAN not found\")\n    \n\n    \n    @index_router.put(\u201c/vlans/{name}/add_interface\u201d)\n     def add_interface_to_vlan(name: str, interface: NetworkInterface):\n    \tif redis.exists(name):\n    \t\tvlan = json.loads(redis.get(name))\n    \t\tvlan[\u201cinterfaces\u201d].append(interface.json())\n    \t\tredis.set(name, json.dumps(vlan))\n    \t\treturn vlan\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"VLAN not found\")\n    \n    @index_router.put(\u201c/vlans/{name}/remove_interface\u201d)\n    def remove_interface_from_vlan(name: str, interface: NetworkInterface):\n    \tif redis.exists(name):\n    \t\tvlan = json.loads(redis.get(name))\n    \t\tvlan[\u201cinterfaces\u201d].remove(interface.json())\n    \t\tredis.set(name, json.dumps(vlan))\n    \t\treturn vlan\n    \telse:\n    \t\traise HTTPException(status_code=404, detail=\"VLAN not found\")"
    },
    "ids": [
        "36041ee4-b109-4db4-b075-306ed5c046cf",
        "170463ad-8d1f-4b68-a373-7ca8f98bfd42",
        "fd8ef1c9-7f2c-4d33-abab-b7ba122cb5cf",
        "ce8e33ac-5753-447a-8b27-a8ec45c4643c",
        "f328069f-07eb-493d-9d7e-42d8ab962912"
    ]
}